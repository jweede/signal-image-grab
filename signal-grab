#!/usr/bin/env python3
"""
Script to grab recent media from signal.
"""
import argparse
import logging
import subprocess
from datetime import datetime, timedelta
from pathlib import Path

logging.basicConfig(level="INFO")
log = logging.getLogger(Path(__file__).name)


class SignalGrab:

    signal_dir = Path("~/.config/Signal/attachments.noindex").expanduser()
    dest_dir = Path("~/Desktop/SignalGrabs").expanduser()

    @staticmethod
    def run(cmd):
        """call subprocess and optionally log"""
        log.debug("run cmd: %r", cmd)
        p = subprocess.run(cmd, universal_newlines=True, check=True, stdout=subprocess.PIPE)
        log.debug("run output: %r", cmd)
        return p.stdout

    def find_extension(self, src_file: Path) -> str:
        file_result = self.run(["file", "--brief", "--mime-type", src_file])
        _, ext = file_result.strip().split("/")
        if ext.startswith("x-"):
            ext = ext[2:]
        return ext

    def check_thumbnail(self, src_file) -> bool:
        file_result = self.run(["file", "--brief", src_file])
        return file_result.startswith("PNG image") and "150 x 150" in file_result

    def signal_grab(self, hours=1) -> None:
        """
        grabs recent hours of images, excludes thumbnails, adds file extensions, and copies to dest.
        """
        self.dest_dir.mkdir(exist_ok=True)

        _newer_than = (datetime.now() - timedelta(hours=hours)).isoformat(timespec="seconds")

        filenames = self.run(["find", self.signal_dir, "-type", "f", "-newerct", _newer_than])
        for filename in filenames.splitlines():
            src_file = Path(filename)
            extension = self.find_extension(src_file)

            # deal with thumbnails
            if extension == "png" and self.check_thumbnail(src_file):
                log.info(f"skipping %s, is a thumbnail", src_file.name)
                continue

            assert src_file.exists()
            dest_file = self.dest_dir / f"{src_file.name}.{extension}"
            if dest_file.exists():
                log.info(f"skipping %s, exists in dest", dest_file.name)
                continue
            self.run(["cp", "-n", src_file, dest_file])

    @staticmethod
    def main(argv=None):
        parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=argparse.RawDescriptionHelpFormatter,
        )
        parser.add_argument("-d", "--debug", action="store_true")
        parser.add_argument("--hours", default=1, type=int, help="previous hours to grab")
        args = parser.parse_args(argv)

        if args.debug:
            log.setLevel(logging.DEBUG)

        sg = SignalGrab()
        sg.signal_grab(hours=args.hours)


if __name__ == "__main__":
    SignalGrab.main()
